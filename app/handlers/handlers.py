from datetime import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.keyboards import keyboards
from app.database import get_session
from app.services.payments.heleket_api import create_invoice
from app.crud.user_service import get_user_by_telegram_id, create_user
from app.crud.vpn_key_service import get_vpn_key_by_user_id
from app.crud.order_service import create_order, update_order_info


router = Router()


class VPNStates(StatesGroup):
    select_server = State()
    select_tariff = State()
    test = State()

@router.message(CommandStart())
async def start(message: Message):
    async for session in get_session():
        user = await get_user_by_telegram_id(session, str(message.from_user.id))
        if not user:
            await create_user(session, str(message.from_user.id), message.from_user.username)

    await message.answer(text="""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""", reply_markup=keyboards.main_kb)


@router.callback_query(F.data == "buy_key")
async def show_servers(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async for session in get_session():
        user = await get_user_by_telegram_id(session, str(callback.from_user.id))
        vpn_key = await get_vpn_key_by_user_id(session, user.id)
        if vpn_key:
            server_region = vpn_key.server.region
            print(f"server_region: {server_region}")
            await state.update_data(region=server_region)
            await state.set_state(VPNStates.select_tariff)
            await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboards.price_kb)
            await state.set_state(VPNStates.select_tariff)
        else:
            # –Ω—É–∂–Ω–æ –±–∏–ª–¥—Ç—å –∫–ª–∞–≤—É —Ç.–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ is_active
            await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=keyboards.regions_kb)
            await state.set_state(VPNStates.select_server)


@router.callback_query(F.data.startswith("region:"))
async def handle_region(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = callback.data.split(":")[1]
    await state.update_data(region=data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboards.price_kb)
    await state.set_state(VPNStates.select_tariff)

@router.callback_query(VPNStates.select_tariff, F.data.startswith("tariff:"))
async def form_price(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    tariff_type = callback.data.split(':')[1]
    data = await state.get_data()
    region = data.get("region")
    await state.clear()
    
    price = None
    month_count = None
    if tariff_type == "1":
        price = "2.20"
        month_count = 1
    elif tariff_type == "2":
        price = "4.40"
        month_count = 3
    elif tariff_type == "3":
        price = "6.60"
        month_count = 6
    elif tariff_type == "4":
        price = "10"
        month_count = 12

    async for session in get_session():
        user = await get_user_by_telegram_id(session, str(callback.from_user.id))
        order = await create_order(session, user.id, price, "USDT", month_count, region)
        invoice = await create_invoice(order.id, price)

        kb = keyboards.create_invoice_keyboard(invoice['result']['url'])
        await update_order_info(session, order.id, invoice['result']['uuid'])
        await callback.message.answer(text="""‚ùóÔ∏è –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫—Ä–∏–ø—Ç–æ–π —É—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ü–û–°–õ–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–ü–õ–ê–¢–´.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –æ–ø–ª–∞—Ç–æ–π —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º.""",
                                      reply_markup=kb)


@router.callback_query(F.data == "my_key")
async def show_all_config(callback: CallbackQuery):
    await callback.answer()
    async for session in get_session():
        user = await get_user_by_telegram_id(session, str(callback.from_user.id))
        vpn_key = await get_vpn_key_by_user_id(session, user.id)
        if vpn_key:
            date = vpn_key.subscription.expires_at
            formatted_date = datetime.strftime(date, "%Y.%m.%d %H:%M")
            await callback.message.answer(f"–ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ: {formatted_date}\n–ö–ª—é—á:\n`{vpn_key.full_key_data}`", parse_mode="Markdown")
        else:
            await callback.message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç VPN-–∫–ª—é—á–∞",
                                          parse_mode="Markdown")


@router.callback_query(F.data == "supp_contacts")
async def support_contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–¢–µ–ª–µ–≥—Ä–∞–º: `@xtwdgnuuqp`\n–ü–æ—á—Ç–∞: `darhanuva@gmail.com`", parse_mode="Markdown")

@router.callback_query(F.data == "guide")
async def guide(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=keyboards.guide_kb)
    
@router.callback_query(F.data == "android")
async def android_guide(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("""üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://play.google.com/store/apps/details?id=app.hiddify.com) –∏–∑ Google Play.
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://play.google.com/store/apps/details?id=app.hiddify.com), —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç—è–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. 
4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–∞–≤ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞". –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
5. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é vpn –Ω–∞–∂–º–∏—Ç–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞.""", parse_mode="Markdown", reply_markup=keyboards.guide_back)

@router.callback_query(F.data == "windows")
async def windows_guide(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("""üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://apps.microsoft.com/detail/9PDFNL3QV2S5?hl=en&gl=RU&ocid=pdpshare) –∏–∑ Microsoft Store –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (https://hiddify.com/).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://apps.microsoft.com/detail/9PDFNL3QV2S5?hl=en&gl=RU&ocid=pdpshare), —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–∞–≤ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞". –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
5. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é vpn –Ω–∞–∂–º–∏—Ç–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞.""", parse_mode="Markdown", reply_markup=keyboards.guide_back)
    
@router.callback_query(F.data == "ios")
async def ios_guide(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("""üçé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Iphone:

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FoXray (https://apps.apple.com/app/id6448898396) –ª–∏–±–æ Streisand (https://apps.apple.com/app/id6450534064) –∏–∑ App Store.
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FoXray (https://apps.apple.com/app/id6448898396), —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç—è–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. 
4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–í—Å—Ç–∞–≤–∫–∏ ‚ßâ". –î–∞–ª–µ–µ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤—Å—Ç–∞–≤–∫–µ.
5. –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫–∞ ‚ñ∑".""", parse_mode="Markdown", reply_markup=keyboards.guide_back)
    
@router.callback_query(F.data == "macos")
async def macos_guide(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("""üçè –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Mac:

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://apps.apple.com/us/app/hiddify-proxy-vpn/id6596777532) –∏–∑ App Store –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (https://hiddify.com/).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify (https://apps.apple.com/us/app/hiddify-proxy-vpn/id6596777532).
4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–∞–≤ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞". –ü—Ä–æ—Ñ–∏–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
5. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é vpn –Ω–∞–∂–º–∏—Ç–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞.""", parse_mode="Markdown", reply_markup=keyboards.guide_back)
    
@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboards.main_kb)
